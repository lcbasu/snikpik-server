package com.server.common.model

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.server.common.enums.ContentType
import com.server.common.enums.MediaQualityType
import com.server.common.enums.MediaType
import com.server.common.utils.CommonUtils.getFileExtension

const val ALL_MEDIA_SOURCE_BUCKET = "unboxed-video-ingestion-to-deliver-source71e471f1-1uyj9h1m9ewum";
const val ALL_MEDIA_SOURCE_CLOUDFRONT_URL = "https://d2qrqijxy3rkcj.cloudfront.net";
const val PROCESSED_IMAGE_CLOUDFRONT_URL = "https://d1fna9whmio5ul.cloudfront.net";
const val SAMPLE_COVER_IMAGE_URL = "${ALL_MEDIA_SOURCE_CLOUDFRONT_URL}/assets01/AppData/SampleImages/sample-cover-image.jpeg"
const val BEST_M3U8_FILE_SUFFIX = "_Ott_Hls_Ts_Avc_Aac_16x9_1920x1080p_8.5Mbps_qvbr"

data class MediaDetail(
    val mediaUrl: String,
    val mimeType: String
)


enum class MediaTypeDetail {
    EMPTY,
    ONLY_IMAGES,
    ONLY_VIDEOS,
    BOTH_IMAGES_AND_VIDEOS,
    UNKNOWN_MEDIA,
}


@Deprecated("Use MediaDetailV2")
data class MediaDetails(
    val media: List<MediaDetail>
)

fun MediaDetails.convertToString(): String {
    this.apply {
        return jacksonObjectMapper().writeValueAsString(this)
    }
}

data class SingleMediaDetail(
    val mediaUrl: String,
    val mediaType: MediaType = MediaType.IMAGE,

    val width: Int? = 0,
    val height: Int? = 0,

    val thumbnailUrl: String? = null,

    val mimeType: String? = null,

    val lengthInSeconds: Long? = 0, // Only applicable for Video and GIF

    @Deprecated("DO NOT USE THIS")
    val contentType: ContentType? = ContentType.ACTUAL,
    @Deprecated("DO NOT USE THIS")
    val mediaQualityType: MediaQualityType? = MediaQualityType.HIGH,
)

data class MediaDetailsV2(
    val media: List<SingleMediaDetail> = emptyList()
)

fun getMediaDetailsFromJsonString(mediaStr: String?): MediaDetailsV2 {
    return try {
        val mediaDetails = jacksonObjectMapper().readValue(mediaStr, MediaDetailsV2::class.java)
        val listOfSingleMediaDetail = mutableListOf<SingleMediaDetail>()
        mediaDetails.media.map { singleMediaDetail ->
            if (singleMediaDetail.thumbnailUrl.isNullOrBlank()) {
                listOfSingleMediaDetail.add(singleMediaDetail.copy(thumbnailUrl = getThumbnailUrl(singleMediaDetail)))
            } else {
                if (singleMediaDetail.thumbnailUrl.contains("cloudfront.net")) {
                    // Unbox URL
                    listOfSingleMediaDetail.add(singleMediaDetail.copy(thumbnailUrl = getThumbnailUrlV2(singleMediaDetail)))
                } else {
                    // Instagram or other URLs
                    listOfSingleMediaDetail.add(singleMediaDetail)
                }
            }
        }
        MediaDetailsV2(listOfSingleMediaDetail)
    } catch (e: Exception) {
        MediaDetailsV2(emptyList())
    }
}

fun getMediaTypeDetailsFromJsonString(mediaStr: String?): MediaTypeDetail {
    val mediaDetails = getMediaDetailsFromJsonString(mediaStr)
    return getMediaTypeDetailsFromMediaDetails(mediaDetails)
}

fun getMediaTypeDetailsFromMediaDetails(mediaDetails: MediaDetailsV2): MediaTypeDetail {

    if (mediaDetails.media.isEmpty()) {
        return MediaTypeDetail.EMPTY
    }

    val listOfMediaType = mediaDetails.media.map { it.mediaType }.toSet()

    if (listOfMediaType.size == 1) {
        if (listOfMediaType.contains(MediaType.IMAGE)) {
            return MediaTypeDetail.ONLY_IMAGES
        } else if (listOfMediaType.contains(MediaType.VIDEO)) {
            return MediaTypeDetail.ONLY_VIDEOS
        }
    } else if (listOfMediaType.size == 2) {
        if (listOfMediaType.contains(MediaType.IMAGE) && listOfMediaType.contains(MediaType.VIDEO)) {
            return MediaTypeDetail.BOTH_IMAGES_AND_VIDEOS
        }
    }
    return MediaTypeDetail.UNKNOWN_MEDIA
}

fun getBestM3u8Url(mediaUrl: String): String {
    val m3u8Url = mediaUrl.replace(".m3u8", "")

    //    val m3u8UrlWithBestQualityExists = try {
//        val url = URL(m3u8UrlWithBestQuality)
//        url.openConnection().getInputStream().close()
//        true
//    } catch (e: Exception) {
//        false
//    }
//
//    return if (m3u8UrlWithBestQualityExists) {
//        m3u8UrlWithBestQuality
//    } else {
//        m3u8Url
//    }

    return "${m3u8Url}${BEST_M3U8_FILE_SUFFIX}.m3u8"
}

private fun getThumbnailUrl(singleMediaDetail: SingleMediaDetail): String {
    if (singleMediaDetail.mediaType == MediaType.VIDEO && singleMediaDetail.mediaUrl.contains(".m3u8")) {
        // For video, we need to get the thumbnail url that was generated by MediaConvert
        return try {
            // Send the thumbnail URL for processed video media
            val mediaUrl = singleMediaDetail.mediaUrl
            val fileName = mediaUrl.substring(mediaUrl.lastIndexOf("USR"))
            val sanitizedFilename = if (fileName.contains(".")) fileName.substring(0, fileName.lastIndexOf(".")) else fileName
            val userId = fileName.split("_-_")[0]
            val key = "assets01/userUploads/${userId}/${sanitizedFilename}_thumbnail.0000000.jpg"
            "${ALL_MEDIA_SOURCE_CLOUDFRONT_URL}/${key}"
        } catch (e: Exception) {
            //e.printStackTrace()
            ""
        }
    }
    // For non-video content, we will return the media url
    return singleMediaDetail.mediaUrl
}


private fun getThumbnailUrlV2(singleMediaDetail: SingleMediaDetail): String {
    if (singleMediaDetail.mediaType == MediaType.VIDEO && singleMediaDetail.mediaUrl.contains(".m3u8")) {
        // For video, we need to get the thumbnail url that was generated by MediaConvert
        return try {
            // Send the thumbnail URL for processed video media
            val mediaUrl = singleMediaDetail.mediaUrl
            val fileName = mediaUrl.substring(mediaUrl.lastIndexOf("USR"))
            val sanitizedFilename = if (fileName.contains(".")) fileName.substring(0, fileName.lastIndexOf(".")) else fileName
            val userId = fileName.split("_-_")[0]
            val key = "assets01/userUploads/${userId}/${sanitizedFilename}_thumbnail.0000000.jpg"
            "${ALL_MEDIA_SOURCE_CLOUDFRONT_URL}/${key}"
        } catch (e: Exception) {
            //e.printStackTrace()
            ""
        }
    }
    // For non-video content, we will return the media url
    return singleMediaDetail.mediaUrl
}

fun getMediaUrlForNotification(mediaStr: String?): String {
    val singleMediaDetail = getMediaDetailsFromJsonString(mediaStr).media.firstOrNull() ?: return ""
    return getThumbnailUrl(singleMediaDetail)
}

val sampleVideoMedia = listOf(
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2_-_d960ceab-f83a-4581-aa9d-0af2f231bd45.mp4",
            mimeType = "video",
            mediaType = MediaType.VIDEO,
            width = 2160,
            height = 3840,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2_-_aca6ad85-4a8f-4bb2-a597-afad052d8a95.mp4",
            mimeType = "video",
            mediaType = MediaType.VIDEO,
            width = 2160,
            height = 3840,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2_-_992b56d6-6184-45c9-8542-6611c2a2d514.mp4",
            mimeType = "video",
            mediaType = MediaType.VIDEO,
            width = 3840,
            height = 2160,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2_-_96de4124-b01b-4002-9d63-f2c285d3be03.mp4",
            mimeType = "video",
            mediaType = MediaType.VIDEO,
            width = 2160,
            height = 3840,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2_-_93a43e2b-7fae-442a-b451-cd2e6e7c4eaf.mp4",
            mimeType = "video",
            mediaType = MediaType.VIDEO,
            width = 1080,
            height = 1920,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2_-_30b32cf0-9a18-46a0-8757-a336ba9529c4.mp4",
            mimeType = "video",
            mediaType = MediaType.VIDEO,
            width = 2160,
            height = 4096,
            mediaQualityType = MediaQualityType.HIGH,
        )
    ))
)

val sampleImageMedia = listOf(
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-atbo-245208.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 3222,
            height = 2327,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-daria-shevtsova-1029803.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 3024,
            height = 4032,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-dmitry-zvolskiy-2082087.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 7320,
            height = 4885,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-dominika-roseclay-1139784.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 3648,
            height = 5168,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-ksenia-chernaya-5806989.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 2537,
            height = 3800,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-ksenia-chernaya-6021777.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 2670,
            height = 4000,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-mister-mister-2442904.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 3024,
            height = 4032,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-pixabay-462235.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 1333,
            height = 2000,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-rachel-claire-5865687.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 3648,
            height = 5291,
            mediaQualityType = MediaQualityType.HIGH,
        )
    )),
    MediaDetailsV2(listOf(
        SingleMediaDetail(
            mediaUrl = "https://d2qrqijxy3rkcj.cloudfront.net/assets01/userUploads/USRT4AnvDzKN0Or7IS98FOOLTNzmxN2/pexels-vecislavas-popa-1571460.jpg",
            mimeType = "image",
            mediaType = MediaType.IMAGE,
            width = 3400,
            height = 2186,
            mediaQualityType = MediaQualityType.HIGH,
        )
    ))
)

val sampleMedia = (sampleImageMedia + sampleVideoMedia).shuffled()

fun MediaDetailsV2.convertToString(): String {
    this.apply {
        return try {
            jacksonObjectMapper().writeValueAsString(this)
        } catch (e: Exception) {
            ""
        }
    }
}

fun MediaDetailsV2.getSanitizedMediaDetails(): MediaDetailsV2 {
    this.apply {
        return try {
            MediaDetailsV2(this.media.map {
                val extension = getFileExtension(it.mediaUrl)
                if (validVideoExtensions.contains(".$extension") && it.mediaType != MediaType.VIDEO) {
                    it.copy(mediaType = MediaType.VIDEO, mimeType = "video")
                } else {
                    it
                }
            })
        } catch (e: Exception) {
            e.printStackTrace()
            this
        }
    }
}

val validVideoExtensions = listOf(
    ".3g2",
    ".3gp",
    ".264",
    ".265",
    ".a64",
    ".apng",
    ".asf",
    ".avi",
    ".avs",
    ".avs2",
    ".cavs",
    ".f4v",
    ".flm",
    ".flv",
    ".gif",
    ".gxf",
    ".h261",
    ".h263",
    ".h264",
    ".h265",
    ".hevc",
    ".ismv",
    ".ivf",
    ".m1v",
    ".m2v",
    ".m4v",
    ".mjpeg",
    ".mjpg",
    ".mkv",
    ".mov",
    ".mp4",
    ".mpeg",
    ".mpeg4",
    ".mpg",
    ".ogv",
    ".rm",
    ".vc1",
    ".vc2",
    ".vob",
    ".webm",
    ".wmv",
    ".y4m",
    ".m3u8",
)
